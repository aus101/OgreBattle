package ogrebattle.lordtypes;

import static ogrebattle.tarot.pojo.TarotSorting.*;

import java.util.Set;
import java.util.TreeSet;

/** Ice Cloud lord type has at least 65 sets (!) of answers that guarantee Ice Cloud is selected.<br>
* Unlike other lord type, Ice Cloud has no question that forced another lord type to receive more points,<br>
* thus can be chosen with 100% certainty. Here the 65 sets are constructed and returned.<br>
*/
public class IceCloud extends LordType {
	private static boolean INIT = false;
	//debatable to return the array or a shallow copy or allow at all
	public static int[] getBASE() {
		if (!INIT) {
			BASE = new int[]{3,2,3,1,1,1,1,3,3,3,1,1,2,2,3,1,3,1,2,2,1,3};
			INIT = true;
		}
		return BASE;
	}

	public static void main(String[] args) {
		IceCloud ic = new IceCloud();
		ic.printSolutions();
	}

	@Override
	public Set<int[]> returnAllSolutionsSet() {
		TreeSet<int[]> selection = new TreeSet<int[]>(new IntArrayComparator());
		selection.add(new int[]{3,2,3,1,1,1,1,3,3,3,1,1,2,2,3,1,3,1,2,2,1,3});//base and 9 ones
		
		selection.add(new int[]{3,3,3,3,1,1,2,1,3,3,1,3,1,1,3,3,2,2,3,3,3,2});
		selection.add(new int[]{3,2,3,3,1,1,2,1,3,3,1,3,1,1,3,3,2,2,3,3,3,2});
		selection.add(new int[]{3,3,3,2,1,1,2,1,3,3,1,3,1,1,3,3,2,2,3,3,3,2});
		
		selection.add(new int[]{3,3,3,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{1,3,3,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,1,3,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		
		selection.add(new int[]{3,2,3,2,1,1,2,1,3,3,1,3,1,1,3,3,2,2,3,3,3,2});
		selection.add(new int[]{3,2,3,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,3,2,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
	
		selection.add(new int[]{3,3,3,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,3,3,3,1,1,2,1,2,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,3,3,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2});
		
		selection.add(new int[]{3,3,3,3,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,3,3,3,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{1,2,3,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		
		selection.add(new int[]{3,1,2,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,1,3,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,1,3,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2});	
		
		selection.add(new int[]{3,1,3,3,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,1,3,3,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,2,2,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		
		selection.add(new int[]{3,2,3,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,2,3,2,1,1,2,1,2,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,2,3,3,1,1,2,1,2,3,1,3,1,1,3,3,1,2,3,3,3,2});
		
		selection.add(new int[]{3,2,3,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2});
		selection.add(new int[]{3,2,3,3,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,2,3,3,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});		
		
		selection.add(new int[]{3,3,2,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,3,2,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2});
		selection.add(new int[]{3,3,2,3,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		
		selection.add(new int[]{3,3,2,3,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,3,3,2,1,1,2,1,2,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,3,3,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2});
		
		selection.add(new int[]{3,3,3,2,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,3,3,2,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,3,3,3,3,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2});	
	
		selection.add(new int[]{3,3,3,3,1,2,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2});
		selection.add(new int[]{3,3,3,3,3,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,1,3,2,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		
		selection.add(new int[]{3,2,2,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2});
		selection.add(new int[]{3,2,2,3,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,2,3,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2});
		
		selection.add(new int[]{3,2,3,3,1,2,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2});
		selection.add(new int[]{3,3,2,2,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});		
		selection.add(new int[]{3,2,3,2,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		
		selection.add(new int[]{3,2,3,2,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,1,2,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,3,3,2,3,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2});
		
		selection.add(new int[]{3,3,3,2,3,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,1,3,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2});
		selection.add(new int[]{3,1,3,2,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		
		selection.add(new int[]{3,2,2,3,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,2,3,3,3,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2});
		selection.add(new int[]{3,2,3,3,3,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		
		selection.add(new int[]{3,3,2,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2});	
		selection.add(new int[]{3,2,2,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});	
		selection.add(new int[]{3,2,2,2,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		
		selection.add(new int[]{3,2,2,2,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		selection.add(new int[]{3,2,2,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2});
		selection.add(new int[]{3,3,2,2,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		
		selection.add(new int[]{3,2,3,2,1,2,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2});
		selection.add(new int[]{3,2,3,2,3,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2});
		selection.add(new int[]{3,3,3,2,1,2,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2});
		
		selection.add(new int[]{3,2,3,2,3,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2});
		
		return selection;
	}
	//card slot at index 9, 10, 14 never changes aka Fortune(3), Justice(1) and Devil(1)
}

/*
card slot at index 9, 10, 14 never changes aka Fortune(3), Justice(1) and Devil(1)

CHANGES FROM: {3,2,3,1,1,1,1,3,3,3,1,1,2,2,3,1,3,1,2,2,1,3}

16 Differences:
{3,3,2,2,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};

16 Differences:
{3,3,2,2,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};

16 Differences:
{3,3,2,3,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};

16 Differences:
{3,3,2,3,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};

16 Differences:
{3,3,3,2,3,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};

16 Differences:
{3,3,3,3,3,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};

----------
Max Ones is 9
{3,2,3,1,1,1,1,3,3,3,1,1,2,2,3,1,3,1,2,2,1,3};//the base

----------

Count: 65
{1,2,3,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{1,3,3,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,1,2,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,1,2,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,1,3,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2};
{3,1,3,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,1,3,2,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,1,3,2,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,1,3,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2};
{3,1,3,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,1,3,3,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,1,3,3,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,2,2,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2};
{3,2,2,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,2,2,2,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,2,2,2,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,2,2,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2};
{3,2,2,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,2,2,3,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,2,2,3,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,2,3,1,1,1,1,3,3,3,1,1,2,2,3,1,3,1,2,2,1,3};
{3,2,3,2,1,1,2,1,2,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,2,3,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2};
{3,2,3,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,2,3,2,1,1,2,1,3,3,1,3,1,1,3,3,2,2,3,3,3,2};
{3,2,3,2,1,2,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2};
{3,2,3,2,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,2,3,2,3,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2};
{3,2,3,2,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,2,3,2,3,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,2,3,3,1,1,2,1,2,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,2,3,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2};
{3,2,3,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,2,3,3,1,1,2,1,3,3,1,3,1,1,3,3,2,2,3,3,3,2};
{3,2,3,3,1,2,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2};
{3,2,3,3,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,2,3,3,3,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2};
{3,2,3,3,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,2,3,3,3,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,3,2,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2};
{3,3,2,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,3,2,2,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,3,2,2,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,3,2,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2};
{3,3,2,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,3,2,3,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,3,2,3,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,3,3,2,1,1,2,1,2,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,3,3,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2};
{3,3,3,2,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,3,3,2,1,1,2,1,3,3,1,3,1,1,3,3,2,2,3,3,3,2};
{3,3,3,2,1,2,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2};
{3,3,3,2,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,3,3,2,3,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2};
{3,3,3,2,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,3,3,2,3,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,3,3,3,1,1,2,1,2,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,3,3,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2};
{3,3,3,3,1,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,3,3,3,1,1,2,1,3,3,1,3,1,1,3,3,2,2,3,3,3,2};
{3,3,3,3,1,2,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2};
{3,3,3,3,1,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,3,3,3,3,1,2,1,3,3,1,3,1,1,3,3,1,2,2,3,3,2};
{3,3,3,3,3,1,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
{3,3,3,3,3,2,2,1,3,3,1,3,1,1,3,3,1,2,3,3,3,2};
*/
